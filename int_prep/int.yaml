- What are semantic tags:
    - Semantic tags are HTML tags that define the meaning of the content they contain.
    - They are used to improve the structure and accessibility of a website, and to make the code easier to read and maintain.
    - Semantic tags are different from non-semantic tags, such as <div> and , which only hold content and don't indicate its role or type.
    - Semantic tags provide a clear description of the content they contain and their purpose.
    - Here are some examples of semantic tags and what they mean:
        - <header>: Represents introductory content
        - <nav>: Defines a section of navigational links
        - <p>: Represents a paragraph of text
        - <h1>, <h2>, <h3>, <h4>, <h5>, <h6>: Represents a page heading
        - <article>: Can be used to manage sections and is reusable and independently distributable
        - <section>: Can be used to group multiple sections of content
        - <figure>: Can be used to enclose a figure or image
        - <figcaption>: Can be used to represent a caption or legend for a figure

- HTTP Vs HTTPS:
    - HTTP:
        - Hypertext Transfer Protocol, and is the primary protocol for transferring data over the internet.
        - When you visit a website, your browser sends an HTTP request to the web server, which responds with an HTTP response.
    - HTTPS:
        - Hypertext Transfer Protocol Secure, and is an encrypted version of HTTP.
        - HTTPS uses TLS (SSL) to encrypt HTTP requests and responses, creating a secure connection between your browser and the server.
        - This protects the communication from being intercepted and tampered with by attackers.

- Different Position properties in CSS:
    - Static:
        - This is the default position for all elements.
        - The element is positioned according to the normal document flow, without any special positioning.
        - No offset properties (top, right, bottom, left) work with this positioning.
    - Relative:
        - The element is positioned relative to its normal position in the document flow.
        - The element's position can be adjusted using top, right, bottom, and left.
    - Absolute:
        - The element is positioned relative to the nearest positioned ancestor (an ancestor with relative, absolute, or fixed positioning).
        - If no such ancestor exists, it is positioned relative to the <html> element (the document).
        - Can be positioned using top, right, bottom, and left.
    - Fixed:
        - The element is positioned relative to the viewport and does not move when the page is scrolled.
        - Removed from the normal document flow.
        - top, right, bottom, and left can be used to specify its position.
        - Always stays in the same position on the screen.
    - Sticky:
        - The element is positioned based on the user's scroll position.
        - It toggles between relative and fixed depending on the scroll position.
        - Requires at least one of top, right, bottom, or left to be defined.
        - The element behaves like relative until a specified offset (e.g., top:- 0) is met, after which it behaves like fixed.
        - Limited to the bounds of its containing block (does not stick outside of its parent)

- CSS Box model:
    - Content:
        - The actual content of the box (text, images, or other elements).
        - Its size is defined by properties like width and height.
    - Padding:
        - The space between the content and the element's border.
        - Padding creates inner spacing inside the element but outside the content.
        - Controlled using padding, padding-top, padding-right, padding-bottom, and padding-left.
    - Border:
        - The boundary that wraps around the padding (if any) and the content.
        - Borders can have styles (solid, dashed, none), widths, and colors.
        - Controlled using border, border-width, border-style, and border-color.
    - Margin:
        - The space outside the element's border that separates it from neighboring elements.
        - Margins create outer spacing.
        - Controlled using margin, margin-top, margin-right, margin-bottom, and margin-left.

    - Content-Box (default):
        - width and height include only the content.
        - Padding and border are added outside the specified width/height.
    - Border-Box:
        - width and height include content, padding, and border.
        - Easier to manage layout since the box size stays fixed.

- ES6 Features:
    - let & const:
        - let x = 10;   // Block scoped
        - x = 20;       // Allowed
        - const y = 30; // Block scoped
        - y = 40;       // Error Cannot reassign a const variable
    - arrow functions:
        - const add = (a, b) => a + b;
        - console.log(add(5, 3)); // 8
    - default parameters:
        - function greet(name = "Guest") { return `Hello, ${name}!` }
        - console.log(greet()); // Hello, Guest!
        - console.log(greet("Alice")); // Hello, Alice!
    - template literals:
        - const name = "John";
        - const age = 25;
        - console.log(`My name is ${name} and I am ${age} years old.`); // My name is John and I am 25 years old.
    - Destructuring:
        - const numbers = [1, 2, 3];
        - const [a, b, c] = numbers;
        - console.log(a, b, c); // 1 2 3

        - const person = { name:- "Alice", age:- 30 };
        - const { name, age } = person;
        - console.log(name, age); // Alice 30
        - const { name:- givenName, age:- givenAge } = person;
        - console.log(givenName, givenAge); // Alice 30
    - rest & spread parameters:
        - Rest:
            - Combines multiple values into an array.
            - function sum(...nums) { return nums.reduce((acc, num) => acc + num, 0); }
            - console.log(sum(1, 2, 3)); // 6
        - Spread:
            - Expands an array or object.
            - const arr1 = [1, 2];
            - const arr2 = [...arr1, 3, 4]; // Spread operator
            - console.log(arr2); // [1, 2, 3, 4]

            - const obj1 = { a:- 1, b:- 2 };
            - const obj2 = { ...obj1, c:- 3 };
            - console.log(obj2); // { a:- 1, b:- 2, c:- 3 }
    - classes:
    - prommises:
    - modules (import/export):
    - Enhavnced object literal:
    - symbol:
        - A new primitive data type for unique identifiers.
    - Iterators and Generators:
        - Iterators:
            - Objects that allow sequential access to elements.
        - Generators:
            - Functions that can pause and resume execution using the yield keyword.
            - function* numbers() {
              yield 1;
              yield 2;
              yield 3;}

              const iterator = numbers();
              console.log(iterator.next().value); // 1
              console.log(iterator.next().value); // 2
              console.log(iterator.next().value); // 3
    - Map & Set:
        - Map:
            - A key-value pair data structure.
            - const map = new Map();
              map.set("name", "Alice");
              map.set("age", 25);
              console.log(map.get("name")); // Alice
        - Set:
            - A collection of unique values.
            - const set = new Set([1, 2, 2, 3]);
              console.log(set); // Set { 1, 2, 3 }
    - for...of loop:
        - Iterates over iterable objects like arrays, strings, or maps.
        - const arr = [10, 20, 30];
          for (const value of arr) { console.log(value); }
          // 10
          // 20
          // 30
    - Default and Named Exports:
        - Default export:
            - A single export from a module.
        - Named export:
            - Allows exporting multiple values.
    - Block scoped functions:
        - Functions declared in a block are scoped to that block.
    - New Methods in Built-in Objects:

- Virtual DOM:
    - The Virtual DOM (VDOM) is a concept implemented in React to optimize performance and enhance the user experience.
    - It serves as a lightweight copy of the actual Real DOM in the browser, allowing React to perform efficient updates without directly manipulating the real DOM every time a change occurs.
    - React compares the previous and new virtual DOMs, calculates the differences, and updates only the necessary parts of the real DOM, rather than re-rendering the entire UI.
    - This approach optimizes updates, minimizes expensive DOM manipulations, and allows for fast, efficient rendering even in complex applications.

- Array Functions:
    - Iteration: forEach(), map(), filter(), reduce(), some(), every()
    - Searching: find(), findIndex(), includes(), indexOf()
    - Modification: push(), pop(), shift(), unshift(), splice(), concat()
    - Rearrangement: sort(), reverse(), slice()
    - Others: reduceRight(), flat(), flatMap(), join()

- Lifecycle Methods:
    - Component Mounting: useEffect(() => { /* mount logic */ }, [])
    - Component Updating: useEffect(() => { /* update logic */ }, [dependencies])
    - Component Unmounting: useEffect(() => { return () => { /* cleanup logic */ } }, [])

- Handle errors in React components:
    - Using try/catch block in each component
    - Error boundary:
        - class: static getDerivedStateFromError() or componentDidCatch()
        - functional components: react-error-boundary

- Scope in JS:
    - Gloabal scope:
        - Variables that are defined outside of any function / block
        - These can be accessed and madified from anywhere in the program
    - Functional scope [Local scope]:
        - Variables declared inside a function
        - These cannot be accessed or modified outside the function
    - Block scope:
        - Variables declared with let or const are limited to the block {}
        - These variables cannot be accessed outside the block
        - variables declared with var does not have block scope
    - Lexical scope:
        - It means a varible defined inside a function is accessible only with func and its nested functions
        - scope is determined at the time of writing, based on where the variables and func are defined

- Scope chain in JS:
    - It determins how variables are resolved in nested functions
    - When a vairable is accessed, JS searches in following order
      - Local scope => innermost function or block scope where variable is declared
      - Parent scope => If not found in local, it will check in parent function's scope
      - Global scope => If still not found, It searches in global scope
      - Unresolved => If a varible isn't found anywhere, it throws Reference Error

- Debouncing:
    - If we click on a button many times there may chance of inresponsive and too many API calls
    - Debouncing allows us to ensure certain tasks don't fire too often
    - A debounce function is a Higher order function that returns other function
    - const <function_name> = debounce(() => {
      console.log("Test Debounce") }, 500);

- Throttle:
    - It is firing event between intervals
    - If we click on button for first time it will execute the action
    - If we keep on clicking, it will not fire the event until a sp. time interval has passed

- program1:
    - const obj = {
      value:42,
      toString() {
      return "hello"},
      valueOf() {
      return 50}}

      console.log(String(obj), Number(obj), obj+"", obj+10, obj.value, String(obj)+10)
      hello 50 50 60 42 hello10

- program2:
    - let name = "Vasanth"
      age = 30 [This will add age to global object]

      console.log(delete name); // false [delete will not work in let, var, const]
      conosle.log(delete age); // true [it removes age from global object]

- program3:
    - let arr = [1, 2];
      for(var i = 0; i < arr.length; i++) {
      setTimeout(() => {
      console.log(i)}, 1000)}

      o/p => 2, 2

- program4:
    - const arr = [1,2,3,4]

      console.log(1 in arr); // true
      console.log(2 in arr); // true
      console.log(4 in arr); // false [index 4 is not in arr so it will return false]
      array is an object
      key of array is index

- program5:
    - let x = 10;
      console.log(x++) // 10
      We are using post increment, it will first return the value then it will increase

- program6:
    - let y = 10;
      console.log(++y) // 11
      We are using pre increment, it will first increment and then return the value

- program7:
    - let str = "Vasanth";
      str[0] = "S"
      console.log(str) // Vasanth

- program8:
    - let a = 1<2<3; => 1(true) < 3 => true
      let b = 1>2>3; => 0(false) > 3 => false
      console.log(a,b) // true, false

    - let x = 10 > 9 > 8; => 1(true) > 8
      console.log(x === true) => false === true => false

- program9:
    - let arr = [1,2];
      let rev = arr.reverse();
      console.log(arr, rev) // [2,1], [2,1]

- program10:
    - let x = 1;
      let y = 2;
      console.log(x++ + ++y) // 4 [x++ => 1, ++y => 3]

- program11:
    - let x;
      if(x == 1 && x == 2 && x == 3) {
      console.log("Hello")}

      Modify x to satisfy the condition
      let x = {
      flag:1,
      toString() {
      return this.flag++}};

- program12:
    - const x = { name:"Vasanth" }
      const arr = ["name"]
      x[arr] = "Kumar"
      console.log(x.name) // Kumar
      => x[arr] will change to x["name"] because object can have key of string and symbol

- program13:
    - console.log([] == []) // false
      => because object are stored based on reference

- program14:
    - const x = [];
      x[4] = 1;
      x.forEach((i) => {
      console.log("Hi")})

      o/p => "Hi"
      Because forEach will not consider undefined / empty

- program15:
    - x++
      console.log(x);
      var x = 21;

      o/p => NaN
      x is hoisted with a value of undefined

- program16:
    - let newList = [1].push(2);
      console.log(newList.push(3));

      o/p => It will throw type error
      in first line .push(2) will return length of array
      in second line 2.push(3) is not a valid syntax

    - const arr = [];
      arr.push(1);
      console.log(arr) // [1]

- program17:
    - y = 10;
      var x = 1 + y;
      console.log(x) // 11
      => because y will be stored as a global variable in global object

    - let val = "5" - 2;
      console.log(val) // 3

    - console.log(2+"3"+4) // 234

    - let x = "8";
      let a = 1;
      console.log(+x+a+1) // 10

- program18:
    - console.log(3+4+"5") => 75
    - var person = {
      name:"Vasanth",
      hello:function(){
      console.log(this.name)}}

      person.hello() => "Vasanth"

- program19:
    - var str1 = "Vasanth";
      var str2 = str1;
      str2 = "Kumar";
      console.log(str1) // Vasanth

    - let str = "Change";
      str = str.replace("C", "R");
      console.log(str) // Rhange;

    - var obj1 = { prop:42 }
      var obj2 = obj1;
      obj2.prop = 90
      console.log(obj1) // { prop:90 }

    - var obj1 = { prop:42 }
      var obj2 = obj1;
      obj2 = {}
      console.log(obj1) // { prop:42 }
      Because reassigning will not change the value

    - var arr1 = [0];
      var arr2 = arr1;
      arr2[0] = 42;
      console.log(arr1) // [42]

    - var arr1 = [1,2];
      var arr2 = arr1.slice();
      arr2[0] = 42;
      console.log(arr1) // [1,2]

    - var a = [1,2];
      var b = a;
      b.push(3);
      console.log(a) // [1,2,3]

- program20:
    - const str = "abc" + +"def";
      console.log(str) // abcNaN
      It will try to convert "def" to number it will return NaN

- program21:
    - const arrowFunc = () => {
      console.log(this.count);}
      arrowFunc()

      o/p => undefined
      Arrow func will not have this keyword
      it will try to check in lexical scope since there is no count in lexical scope it will return undefined

- program22:
    - let a = true;
      let b = true;
      let c = false;
      console.log(a && b || c) // true

- program23:
    - let obj = { age:24 }
      let { age:userAge } = obj;
      console.log(age) // Ref error
      console.log(userAge) // 24

- program24:
    - console.log(1 || 2 && 3) => 1 || 3 [gets last truthy value] => 1 [takes first truthy value]
    - AND has more precedence
